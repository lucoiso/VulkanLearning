name: CMake Build Workflow

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  BUILD_TYPE: Debug
  BUILD_TESTS: true
  GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
  VCPKG_ROOT: ${{github.workspace}}/vcpkg
  VCPKG_BUILTIN_BASELINE: 5a38b5ec0eee3d1a1a6faab5e944617fee2697cf
  VCPKG_ENABLE_METRICS: 1
  VCPKG_DEFAULT_BINARY_CACHE: ${{github.workspace}}/vcpkg/bincache
  VCPKG_BINARY_SOURCES: 'clear;x-gha,readwrite'
  OUTPUT_DIRECTORY: out/build

permissions:
  actions: read
  deployments: write
  contents: write
  id-token: write
  security-events: write

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]

    steps:
      - name: Checkout & Init Submodules
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: 'recursive'

      - name: Install Latest CMake Version
        uses: lukka/get-cmake@latest

      - name: Setup Environment
        if: matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest'
        run: |
          # Add any setup steps needed for Linux and macOS

      - name: Install Vulkan SDK
        uses: humbletim/setup-vulkan-sdk@v1.2.0
        with:
          vulkan-query-version: latest
          vulkan-components: Vulkan-Headers
          vulkan-use-cache: true

      - name: Setup VCPKG
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgDirectory: ${{env.VCPKG_ROOT}}
          vcpkgGitCommitId: ${{env.VCPKG_BUILTIN_BASELINE}}
          vcpkgJsonGlob: '**/vcpkg.json'

      - name: Configure and Build Project
        uses: lukka/run-cmake@v10
        with:
          cmakeListsTxtPath: '${{github.workspace}}/CMakeLists.txt'
          configurePreset: ${{env.BUILD_TYPE}}
          buildPreset: ${{env.BUILD_TYPE}}

      - name: Run Tests
        working-directory: ${{github.workspace}}/${{env.OUTPUT_DIRECTORY}}/${{env.BUILD_TYPE}}
        run: ctest -C ${{env.BUILD_TYPE}} --repeat until-pass:8 --output-on-failure --verbose

      - name: Run Benchmark
        working-directory: ${{github.workspace}}/${{env.OUTPUT_DIRECTORY}}/${{env.BUILD_TYPE}}/Binaries
        run: ./RenderCoreBenchmark.exe
