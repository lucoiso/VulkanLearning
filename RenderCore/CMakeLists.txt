# Author: Lucas Vilas-Boas
# Year: 2024
# Repo: https://github.com/lucoiso/vulkan-renderer

# ----------- Global Definitions -----------
SET(LIBRARY_NAME RenderCore)
SET(RENDERER_RESOURCES_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/Resources)

# ------------- Library Setup --------------
SET(PRIVATE_MODULES_BASE_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/Source/Private)
SET(PUBLIC_MODULES_BASE_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/Source/Public)

FILE(GLOB_RECURSE PRIVATE_MODULES *.cxx)
FILE(GLOB_RECURSE PUBLIC_MODULES *.ixx)

ADD_LIBRARY(${LIBRARY_NAME} SHARED ${PRIVATE_MODULES})

SET_TARGET_PROPERTIES(${LIBRARY_NAME} PROPERTIES LINKER_LANGUAGE CXX)

TARGET_SOURCES(${LIBRARY_NAME}
        PUBLIC
        FILE_SET cxx_public_modules
        TYPE CXX_MODULES
        BASE_DIRS ${PUBLIC_MODULES_BASE_DIRECTORY}
        FILES ${PUBLIC_MODULES}
)

TARGET_INCLUDE_DIRECTORIES(${LIBRARY_NAME} PRIVATE ${PRIVATE_MODULES_BASE_DIRECTORY})
TARGET_COMPILE_DEFINITIONS(${LIBRARY_NAME} PRIVATE BUILD_DLL)

FIND_PACKAGE(Boost REQUIRED COMPONENTS log)
FIND_PACKAGE(tinygltf CONFIG REQUIRED)

FIND_PACKAGE(glfw3 CONFIG REQUIRED)

IF (VULKAN_RENDERER_ENABLE_IMGUI)
    FIND_PACKAGE(imgui CONFIG REQUIRED)

    TARGET_LINK_LIBRARIES(${LIBRARY_NAME} PRIVATE
            imgui::imgui
            ImGui-Backend
    )

    TARGET_COMPILE_DEFINITIONS(${LIBRARY_NAME} PRIVATE VULKAN_RENDERER_ENABLE_IMGUI)
ENDIF ()

TARGET_LINK_DIRECTORIES(${LIBRARY_NAME} PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/Libraries)

TARGET_LINK_LIBRARIES(${LIBRARY_NAME} PRIVATE
        Boost::log
        TinyGLTF::TinyGLTF
        glfw
        ThreadPool
)

SET(VULKAN_LIBS_TO_LINK
        volk
        SPIRV-Tools
        SPIRV-Tools-opt
        GenericCodeGen
        glslang
        glslang-default-resource-limits
        MachineIndependent
        OSDependent
        SPIRV
)

FOREACH (VkLib ${VULKAN_LIBS_TO_LINK})
    IF (CMAKE_BUILD_TYPE MATCHES "Debug")
        TARGET_LINK_LIBRARIES(${LIBRARY_NAME} PRIVATE $ENV{VULKAN_SDK}/Lib/${VkLib}d.lib)
    ELSE ()
        TARGET_LINK_LIBRARIES(${LIBRARY_NAME} PRIVATE $ENV{VULKAN_SDK}/Lib/${VkLib}.lib)
    ENDIF (CMAKE_BUILD_TYPE MATCHES "Debug")
ENDFOREACH ()

TARGET_INCLUDE_DIRECTORIES(${LIBRARY_NAME} PRIVATE $ENV{VULKAN_SDK}/Include)

TARGET_COMPILE_DEFINITIONS(${LIBRARY_NAME} PRIVATE
        # Assets directory (relative to binaries)
        DEFAULT_VERTEX_SHADER="Resources/Shaders/DEFAULT_SHADER.vert"
        DEFAULT_FRAGMENT_SHADER="Resources/Shaders/DEFAULT_SHADER.frag"
)

TARGET_COMPILE_DEFINITIONS(${LIBRARY_NAME} PUBLIC
        GPU_API_DUMP=0
)

IF (WIN32)
    SET(VOLK_STATIC_DEFINES VK_USE_PLATFORM_WIN32_KHR)

    TARGET_COMPILE_DEFINITIONS(${LIBRARY_NAME} PUBLIC
            VK_USE_PLATFORM_WIN32_KHR
            WIN32_LEAN_AND_MEAN
            NOMINMAX
            _WIN32_WINNT=0x0A00
    )
ELSEIF (MACOS)
    SET(VOLK_STATIC_DEFINES VK_USE_PLATFORM_MACOS_MVK)

    TARGET_COMPILE_DEFINITIONS(${LIBRARY_NAME} PUBLIC
            VK_USE_PLATFORM_MACOS_MVK
    )
ELSEIF (UNIX)
    SET(VOLK_STATIC_DEFINES VK_USE_PLATFORM_XCB_KHR)

    TARGET_COMPILE_DEFINITIONS(${LIBRARY_NAME} PUBLIC
            VK_USE_PLATFORM_XCB_KHR
    )
ENDIF (WIN32)

ADD_CUSTOM_COMMAND(TARGET ${LIBRARY_NAME} POST_BUILD
        COMMAND ${CMAKE_COMMAND} -E copy_directory_if_different "${RENDERER_RESOURCES_DIRECTORY}/Shaders" "$<TARGET_FILE_DIR:${LIBRARY_NAME}>/Resources/Shaders"
        COMMAND ${CMAKE_COMMAND} -E copy_directory_if_different "${RENDERER_RESOURCES_DIRECTORY}/Assets/glTF-Sample-Assets/Models"
        "$<TARGET_FILE_DIR:${LIBRARY_NAME}>/Resources/Assets"
)